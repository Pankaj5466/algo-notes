\chapter{CAP in Districuted System}
\label{chapter:cap}

\qs{Types of System}
All the system can be categorirzed to some of the below: \\ 
(a) Highly Availalbe System / Strongly Availalbe System ex: \\
(b) Highly Consistely System / Strong Consistely system  ex: Banking system\\

\lstart
    \i System Scalibility
    \i System Availibility (should not slow down when the load is high, in extream case slow down means system stops responding)
    \i Tolerant System (System continue to work even though some part of the system is not working expected or are under heavy load)
\lend




\qe

System Reliability: Reliability refers to the ability of a system to consistently perform its intended functions without failures or errors over a specified period. It encompasses both availability and correctness.

System Resilience: Resilience refers to a system's ability to recover and adapt in the face of unexpected failures or disruptions. A resilient system can continue functioning even when individual components or parts fail.

System Redundancy: Redundancy involves duplicating critical components or resources in a system to ensure continued operation in case of failures. Redundancy can improve both availability and reliability.

Failover: Failover is the process of switching from a failed component or resource to a backup or redundant component to maintain uninterrupted service.

Load Balancing: Load balancing distributes incoming workloads across multiple resources to ensure even resource utilization, optimize performance, and prevent bottlenecks.

Scalability: As previously mentioned, scalability refers to a system's ability to handle increased workloads or demand by adding resources or adapting to changing requirements.

Performance: Performance relates to how efficiently a system responds to user interactions and processes tasks. High performance often involves minimizing response times and maximizing throughput.

Latency: Latency is the delay between initiating an action and receiving a response. Low latency is crucial for providing responsive and real-time services.

Throughput: Throughput measures the rate at which a system can process tasks or transactions. It indicates the system's capacity to handle a certain number of operations within a specific timeframe.

Bottleneck: A bottleneck is a point in a system where the flow of data or operations is restricted, leading to reduced overall performance.

Capacity Planning: Capacity planning involves estimating the required resources and infrastructure to meet current and future demands while maintaining performance and availability.

Elasticity: Elasticity refers to a system's ability to automatically and dynamically adjust its resources in response to changing workloads, helping to maintain performance and cost efficiency.

Distributed Systems: Distributed systems involve multiple interconnected components or nodes that work together to provide a unified service. Designing and managing distributed systems require considerations of consistency, availability, and fault tolerance.

Partition Tolerance: As part of the CAP theorem, partition tolerance refers to a system's ability to continue functioning in the presence of network partitions or communication failures between components.



\qs{CAP Theorme in Levels}
    (C) \b{Consistency Level:} Strong Consistency: In a strongly consistent system, all nodes in the distributed system see the same set of updates in the same order. Reads and writes are guaranteed to reflect the most recent write operation. Achieving strong consistency may require coordination and synchronization mechanisms, which can impact performance and availability, especially during network partitions.

    Eventual Consistency: In an eventually consistent system, updates made to the data will eventually be propagated to all replicas, but there is no guarantee about the order or timing of when different replicas will receive updates. Eventually consistent systems prioritize availability and partition tolerance over strong consistency. While eventual consistency can introduce short-lived inconsistencies, it often provides better availability and performance.
    
    Causal Consistency: Causal consistency ensures that operations that are causally related (where one operation depends on the result of another) are seen by all nodes in a specific order. Causal consistency maintains the causal relationship between operations while relaxing the requirement for global ordering of all operations.
    
    Read Your Writes Consistency: This level of consistency guarantees that if a client reads data after writing it, it will always see the write's effects. It provides a stronger guarantee than eventual consistency but doesn't necessarily ensure that other clients will see the effects of the write immediately.
    
    Monotonic Reads/Writes Consistency: These levels ensure that if a client reads or writes data multiple times, the reads/writes will not "go back in time." In other words, the data seen or written will be monotonically increasing.
    
    Bounded Staleness Consistency: This level allows for some lag in data synchronization between replicas. Data may be slightly stale, but the system guarantees that the staleness will not exceed a predefined bound.

    (A) \b{Availibility Levels:} High Availability (HA): High availability is a design principle that aims to ensure that a system remains operational and accessible with minimal downtime. HA systems often use redundancy, failover mechanisms, and load balancing to distribute traffic across multiple servers or instances. If one component or node fails, another can take over quickly to maintain service availability.

    Fault Tolerance: Fault-tolerant systems are designed to continue operating even when individual components or nodes experience failures. These systems employ redundancy, error detection and correction, and self-healing mechanisms to ensure continuous operation and data integrity.
    
    99.9per, 99.99per, 99.999per Availability: These percentages represent different levels of availability, often referred to as "nines." For example, "99.9per availability" means that the system is expected to be operational 99.9per of the time in a given period, leaving room for around 8.76 hours of downtime per year. Achieving higher availability percentages (more nines) requires more redundancy and fault-tolerant design.
    
    Distributed Denial of Service (DDoS) Mitigation: Many high-availability systems include DDoS mitigation strategies to protect against malicious attacks that could overwhelm a system's resources and lead to downtime.
    
    Recovery Time Objective (RTO) and Recovery Point Objective (RPO): These concepts are often used in disaster recovery planning. RTO refers to the maximum acceptable downtime following a failure, while RPO refers to the maximum acceptable data loss. Systems with high availability often have low RTO and RPO values.
    
    Redundancy and Failover: Highly available systems often use redundant components (such as servers, databases, and network links) and failover mechanisms to quickly switch to backup resources in case of a failure. This minimizes service disruption.
    
    Load Balancing: Load balancing distributes incoming network traffic across multiple servers or instances to ensure even utilization and prevent any single point of failure.
    
    Auto-Scaling: Cloud-based systems can automatically adjust their capacity based on demand. When traffic increases, the system can provision additional resources to handle the load, and scale down during periods of lower demand.
    
    Geographic Redundancy: Deploying resources across different geographic regions helps ensure availability even in the event of a regional outage or disaster.
    
    It's important to note that achieving high availability often involves trade-offs in terms of cost, complexity, and other factors. Organizations need to carefully balance their availability requirements with other considerations such as consistency, performance, and security.
    
    
    
    
    
    Regenerate
    

    (P) Partiotining Ways:
\qe